---
- name: Setup Gitlab Server
  hosts: all
  become: yes
  gather_facts: yes
  vars_files:
    - vars/main.yml
  tasks:
    - name: Include OS-specific variables.
      include_vars: "vars/{{ ansible_os_family }}.yml"
    
    - name: Check if GitLab configuration file already exists.
      stat: path=/etc/gitlab/gitlab.rb
      register: gitlab_config_file
    
    - name: Check if GitLab is already installed.
      stat: path=/usr/bin/gitlab-ctl
      register: gitlab_file
    
    # Install GitLab and its dependencies.
    - name: Install GitLab dependencies.
      package:
        name: "{{ gitlab_dependencies }}"
        state: present
    
    - name: Install GitLab dependencies (Debian).
      apt:
        name: gnupg2
        state: present
      when: ansible_os_family == 'Debian'
    
    - name: Download GitLab repository installation script.
      get_url:
        url: "{{ gitlab_repository_installation_script_url }}"
        dest: /tmp/gitlab_install_repository.sh
        validate_certs: "{{ gitlab_download_validate_certs }}"
      when: not gitlab_file.stat.exists
    
    - name: Install GitLab repository.
      command: bash /tmp/gitlab_install_repository.sh
      register: output
      when: not gitlab_file.stat.exists
    
    - name: Define the Gitlab package name.
      set_fact:
        gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
      when: gitlab_version | default(false)
    
    - name: Install GitLab
      package:
        name: "{{ gitlab_package_name | default(gitlab_edition) }}"
        state: present
      async: "{{ gitlab_install_timeout }}"
      poll: 5
      when: not gitlab_file.stat.exists
    
    # Start and configure GitLab. Sometimes the first run fails, but after that,
    # restarts fix problems, so ignore failures on this run.
    - name: Reconfigure GitLab (first run).
      command: >
        gitlab-ctl reconfigure
        creates=/var/opt/gitlab/bootstrapped
      failed_when: false
    
   
    - name: Generate backup script.
      template:
        src: "templates/{{ gitlab_backup_script_template }}"
        dest: /root/backup.sh
        owner: root
        group: root
        mode: 0744
      when: not gitlab_file.stat.exists
    
    - name: Setup backup cronjob.
      cron:
        name: "backup gitlab"
        minute: "0"
        hour: "2"
        job: "/root/backup.sh >/dev/null 2>&1"
      when: not gitlab_file.stat.exists


    
    - name: configure gitlab_url
      lineinfile:
        dest: /etc/gitlab/gitlab.rb
        regexp: '^external'
        line: 'external_url "https://{{ ansible_default_ipv4.address }}/"'
      notify: Restart Gitlab
      when: not gitlab_file.stat.exists

    - name: Open port 80 & 443 for http & https access
      firewalld:
        service: "{{ item }}"
        permanent: true
        state: enabled
      loop:
        - https
        - http
      when: not gitlab_file.stat.exists

    - name: sshd Service enabled and running
      service:
        name: sshd
        enabled: true
        state: started
      when: not gitlab_file.stat.exists

    - name: Restart the firewalld service to load in the firewall changes
      service: 
        name: firewalld 
        state: restarted
      when: not gitlab_file.stat.exists

    - name: Reset the root Password
      shell: echo -e "{{gitlab_passwd}}\n{{gitlab_passwd}}" | gitlab-rake "gitlab:password:reset[root]"
      when: not gitlab_file.stat.exists

              
    
    - name: GitLab Url & deafult Password is {{gitlab_passwd}}
      debug:
        msg: "Gitlab_url:https://{{ ansible_default_ipv4.address }} and Password:{{gitlab_passwd}}"

    


  handlers:
    - name: Restart Gitlab
      command: gitlab-ctl reconfigure
      register: gitlab_restart
      listen: restart_gitlab
      failed_when: gitlab_restart_handler_failed_when | bool
